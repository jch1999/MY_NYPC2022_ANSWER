//정리부터 해보자 행이나 열에 같은 색이 많은 색일 수록 먼저 칠해진다.
//단 한 줄이 모두 같은 색인 경우에는 가장 나중에 칠해져야 하므로
//먼저 한 줄이 같은 색인 경우를 찾는다.
//그 다음 칠해진 수가 많은 색을 찾는다. 
//칠해지는 순서는 행 vs 열로 비교해서 해당 수가 더 많은 쪽을 따라가도록 해야하나?
//행이나 열 전체를 색칠한 것을 제외하고 그 나머지를 다 칠하는 것을 다시 제외하고 해서 구하는 건가?
//꼬였다... 일단 임시 저장하자
//아 이런 문제를 잘 못 읽었어 아니 제대로 안 읽었네...
//0은 색이 칠해져 있지 않거나 어떤 색이 칠해지든 상관 없음을 의미한다였네..
//다시 짜기 전에 임시저장
#include <iostream>
#include <vector>
#include <queue>

#define FAST ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

using namespace std;

const int colorCnt=7;
int row,col,checkedRow=0,checkedCol=0;
vector<vector<int>> matrix;
vector<vector<int>> matrixRowColorCnt;
vector<bool> isCheckedRow;
vector<bool> isCheckedCol;
vector<vector<int>> matrixColColorCnt;
priority_queue<pair<pair<int,int>,pair<string,int>>> answer;

void FindLineBingo()
{
    while(checkedRow!=row||checkedCol!=col)
    {
        for(int i=0;i<row;i++)
        {
            if(isCheckedRow[i])
                continue;
            for(int j=0;j<colorCnt;j++)
            {
                if(matrixRowColorCnt[i][j]>=col-checkedCol)
                {
                    checkedRow++;
                    answer.push({{checkedCol,i+1},{"H",j}});
                    isCheckedRow[i]=true;
                }
            }
        }
        
        for(int i=0;i<col;i++)
        {
            if(isCheckedCol[i])
                continue;
            for(int j=0;j<colorCnt;j++)
            {
                if(matrixRowColorCnt[i][j]>=row-checkedRow)
                {
                    checkedCol++;
                    answer.push({{checkedRow,i+1},{"V",j}});
                    isCheckedCol[i]=true;
                }
            }
        }
    }
}

//N-row, M-col 입력 후 색칠판-matrix 초기화
void Input()
{
    cin>>row>>col;
    matrix.resize(row);
    matrixRowColorCnt.resize(row);
    matrixColColorCnt.resize(col);
    isCheckedRow.resize(row);
    isCheckedCol.resize(col);
    
    for(int i=0;i<row;i++)
    {
        matrix[i].resize(col);
        matrixRowColorCnt[i].resize(colorCnt);
    }
    for(int i=0;i<col;i++)
    {
        matrixColColorCnt[i].resize(colorCnt);
    }

    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            cin>>matrix[i][j];
            matrixRowColorCnt[i][matrix[i][j]]++;
            matrixColColorCnt[j][matrix[i][j]]++;
        }
    } 
}

void Output()
{
    cout<<answer.size()<<'\n';
    pair<pair<int,int>,pair<string,int>> answerPop;
    while(!answer.empty())
    {
        answerPop=answer.top();
        answer.pop();

        cout<<answerPop.second.first<<" "<<answerPop.first.second<<
            " "<<answerPop.second.second<<'\n';

    }
}

int main()
{
    FAST

    Input();
    
    FindLineBingo();
    
    Output();

    return 0;
}
