
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>

#define FAST ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

using namespace std;

int main()
{
  FAST

  int row,col,totalColorCnt=0;
  vector<vector<int>> matrix;
  vector<pair<string,pair<int,int>>> result;
  cin>>row>>col;
  matrix.resize(row);
  for(int i=0;i<row;i++)
  {
    matrix[i].resize(col);
  }

  //input
  for(int i=0;i<row;i++)
  {
    for(int j=0;j<col;j++)
    {
      cin>>matrix[i][j];
      if(matrix[i][j]!=0)
        totalColorCnt++;
    }
  }
  
  while(totalColorCnt!=0)
  {
    for(int i=0;i<row;i++)
    {
      int rowColor=0;
      bool rowEqual=true;
      int colorCnt=0;
      for(int j=0;j<col;j++)
      {
        if(matrix[i][j]==0)
          continue;
        if(rowColor==0)
        {    
          rowColor=matrix[i][j];
          colorCnt=1;
        }
        else if(rowColor!=matrix[i][j])
        {
          rowEqual=false;
          break;
        }
        else
        {
          colorCnt++;
        }
          
      }
      if(rowEqual&&rowColor!=0)
      {
        totalColorCnt-=colorCnt;
        result.push_back({"H",{i+1,rowColor}});
        for(int j=0;j<col;j++)
          matrix[i][j]=0;
      }
    }
    
    for(int i=0;i<col;i++)
    {
      int colColor=0;
      bool colEqual=true;
      int colorCnt=0;
      for(int j=0;j<row;j++)
      {
        if(matrix[j][i]==0)
          continue;
        if(colColor==0)
        {    
          colColor=matrix[j][i];
          colorCnt=1;
        }
        else if(colColor!=matrix[j][i])
        {
          colEqual=false;
          break;
        }
        else
        {
          colorCnt++;
        }
          
      }
      if(colEqual&&colColor!=0)
      {
        totalColorCnt-=colorCnt;
        result.push_back({"V",{i+1,colColor}});
        for(int j=0;j<row;j++)
          matrix[j][i]=0;
      }
    }
  }
  reverse(result.begin(),result.end());
  for(int i=0;i<result.size();i++)
  {
    cout<<result[i].first<<" "<<result[i].second.first<<" "<<result[i].second.second<<'\n';
  }
return 0;
}
//전체 색의 수,
//행별 전체 색의 수와 행에 존재하는 색마다의 수,
//열별 전체 색의 수와 열에 존재하는 색마다의 수를 비교하여
//줄(행 or 열)의 전체 색의 수와 색의 수가 일치하는 경우 해당 줄을 queue에 넣고
//해당 줄과 교차하는 줄의 해당 색에 대한 정보 변화(갯수 감소)
//일치하는 줄 지우기
//남은 줄들 가지고 반복

//삼중 반복문 아닌 거 같은데...
//교차하는 선에서 제외되는 색의 정보를 변경해야 하는데..
//런타임 초과가 뜨네...
//사중 반복문이었네...

//이중 백터로 만든 다음, [row_index][colorNum]에 색이 존재하는 col값을 저장
//이중 백터로 만든 다음, [col_index][colorNum]에 색이 존재하는 row값을 저장
//이러면 따로 갯수를 저장하는 배열 필요 없이 vector.size()를 호출하면 되기는 할
//텐데.. vector.erase였나? remove였나? 그걸로 지우면거고.. 사중 반복문을 없애야
//하는데 이러면 되려나?
//..........차라리 map을 써볼까?
//행별, 열별 존재하는 색의 종류를 저장하는 백터 -> 종류가 1개일 경우 해당 줄을
//제거
//다 지우고 다시 해보니 힘들게 여러 백터 만들어서 관리할 필요가 없었다는 걸 알게 되었다...
